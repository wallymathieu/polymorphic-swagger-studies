package se.gewalli.polymorphic_swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import se.gewalli.polymorphic_swagger.model.ProductModelV2;
import javax.validation.Valid;
import io.swagger.v3.oas.annotations.media.Schema;


import javax.annotation.Generated;

/**
 * ProductModelV2
 */

@JsonIgnoreProperties(
  value = "version", // ignore manually set version, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the version to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "version", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = ProductModel.class, name = "ProductModel"),
  @JsonSubTypes.Type(value = ProductModelV2.class, name = "ProductModelV2")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-01-28T19:45:56.796705+02:00[Europe/Athens]")
public class ProductModelV2 extends ProductModel {

  @JsonProperty("properties")
  @Valid
  private JsonNullable<Map<String, String>> properties = JsonNullable.undefined();

  public ProductModelV2 properties(Map<String, String> properties) {
    this.properties = JsonNullable.of(properties);
    return this;
  }

  public ProductModelV2 putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = JsonNullable.of(new HashMap<>());
    }
    this.properties.get().put(key, propertiesItem);
    return this;
  }

  /**
   * Get properties
   * @return properties
  */
  
  @Schema(name = "properties", required = false)
  public JsonNullable<Map<String, String>> getProperties() {
    return properties;
  }

  public void setProperties(JsonNullable<Map<String, String>> properties) {
    this.properties = properties;
  }

  public ProductModelV2 version(String version) {
    super.setVersion(version);
    return this;
  }

  public ProductModelV2 id(BigInteger id) {
    super.setId(id);
    return this;
  }

  public ProductModelV2 cost(Float cost) {
    super.setCost(cost);
    return this;
  }

  public ProductModelV2 name(String name) {
    super.setName(JsonNullable.of(name));
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductModelV2 productModelV2 = (ProductModelV2) o;
    return equalsNullable(this.properties, productModelV2.properties) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(properties), super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductModelV2 {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

