package se.gewalli.polymorphic_swagger.model;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import se.gewalli.polymorphic_swagger.model.AddProduct;
import se.gewalli.polymorphic_swagger.model.AddProduct2;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * AddProduct2
 */

@JsonIgnoreProperties(
  value = "version", // ignore manually set version, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the version to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "version", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = AddProduct.class, name = "AddProduct"),
  @JsonSubTypes.Type(value = AddProduct2.class, name = "AddProduct2")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-01-28T19:45:56.796705+02:00[Europe/Athens]")
public class AddProduct2 extends AddProduct implements ApiV1ProductsGetRequest {

  @JsonProperty("properties")
  @Valid
  private Map<String, String> properties = new HashMap<>();

  public AddProduct2 properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public AddProduct2 putPropertiesItem(String key, String propertiesItem) {
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * 
   * @return properties
  */
  @NotNull 
  @Schema(name = "properties", description = "", required = true)
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }

  public AddProduct2 version(String version) {
    super.setVersion(version);
    return this;
  }

  public AddProduct2 cost(BigDecimal cost) {
    super.setCost(cost);
    return this;
  }

  public AddProduct2 name(String name) {
    super.setName(name);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddProduct2 addProduct2 = (AddProduct2) o;
    return Objects.equals(this.properties, addProduct2.properties) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(properties, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddProduct2 {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

