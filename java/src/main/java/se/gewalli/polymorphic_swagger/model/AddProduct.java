package se.gewalli.polymorphic_swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import java.math.BigDecimal;
import se.gewalli.polymorphic_swagger.model.AddProduct;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * AddProduct
 */

@JsonIgnoreProperties(
  value = "version", // ignore manually set version, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the version to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "version", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = AddProduct.class, name = "AddProduct"),
  @JsonSubTypes.Type(value = AddProduct2.class, name = "AddProduct2")
})

public class AddProduct {

  @JsonProperty("version")
  private String version;

  @JsonProperty("cost")
  private BigDecimal cost;

  @JsonProperty("name")
  private String name;
  public AddProduct(){

  }
  public AddProduct(int cost, String name) {
    this(BigDecimal.valueOf(cost), name);
  }

  public AddProduct(BigDecimal cost, String name) {
    this.cost = cost;
    this.name = name;
  }

  public AddProduct version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
  */
  @NotNull 
  @Schema(name = "version", required = true)
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public AddProduct cost(BigDecimal cost) {
    this.cost = cost;
    return this;
  }

  /**
   * 
   * minimum: 0.1
   * maximum: 1000000
   * @return cost
  */
  @NotNull @Valid @DecimalMin("0.1") @DecimalMax("1000000") 
  @Schema(name = "cost", description = "", required = true)
  public BigDecimal getCost() {
    return cost;
  }

  public void setCost(BigDecimal cost) {
    this.cost = cost;
  }

  public AddProduct name(String name) {
    this.name = name;
    return this;
  }

  /**
   * 
   * @return name
  */
  @NotNull @Size(min = 3, max = 60) 
  @Schema(name = "name", description = "", required = true)
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddProduct addProduct = (AddProduct) o;
    return Objects.equals(this.version, addProduct.version) &&
        Objects.equals(this.cost, addProduct.cost) &&
        Objects.equals(this.name, addProduct.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, cost, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddProduct {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

